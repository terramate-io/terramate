// Copyright 2023 Terramate GmbH
// SPDX-License-Identifier: MPL-2.0

// Package event implements a simple event stream and defines all
// events generated by different parts of Terramate.
package event

import (
	"github.com/terramate-io/terramate/project"
	"github.com/terramate-io/terramate/tf"
)

type (
	// VendorRequest represents an event indicating that a request to vendor was made.
	VendorRequest struct {
		// Source is the source of the module.
		Source tf.Source
		// VendorDir is where the source is supposed to be vendored.
		VendorDir project.Path
	}

	// VendorProgress represents a vendor progress event.
	VendorProgress struct {
		Message   string
		TargetDir project.Path
		Module    tf.Source
	}
)

// Stream is a stream of events.
type Stream[T any] chan T

// NewStream creates a new stream.
func NewStream[T any](buffsize int) Stream[T] {
	return Stream[T](make(chan T, buffsize))
}

// Send event on this event stream. Returns true if stream is not full,
// false if the stream is full.
func (s Stream[T]) Send(event T) bool {
	select {
	case s <- event:
		return true
	default:
		return false
	}
}
