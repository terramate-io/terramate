// Copyright 2024 Terramate GmbH
// SPDX-License-Identifier: MPL-2.0

stack {
  name        = "package cloud // import \"github.com/terramate-io/terramate/cloud\""
  description = "package cloud // import \"github.com/terramate-io/terramate/cloud\"\n\nPackage cloud implements a client SDK for communication with the cloud API.\n\nPackage cloud implements the SDK for communicating with the Terramate Cloud.\n\nconst WellKnownCLIPath = \"/.well-known/cli.json\" ...\nconst PreviewsPath = \"/v1/previews\" ...\nconst BaseURL = \"https://\" + Host\nconst DefaultLogBatchSize = 256\nconst DefaultLogSyncInterval = 1 * time.Second\nconst ErrNotFound errors.Kind = \"resource not found (HTTP Status 404)\"\nconst ErrUnexpectedResponseBody errors.Kind = \"unexpected API response body\"\nconst ErrUnexpectedStatus errors.Kind = \"unexpected status code\"\nconst Host = \"api.terramate.io\"\nfunc Get[T Resource](ctx context.Context, client *Client, u url.URL) (entity T, err error)\nfunc Patch[T Resource](ctx context.Context, client *Client, payload interface{}, url url.URL) (entity T, err error)\nfunc Post[T Resource](ctx context.Context, client *Client, payload interface{}, url url.URL) (entity T, err error)\nfunc Put[T Resource](ctx context.Context, client *Client, payload interface{}, url url.URL) (entity T, err error)\nfunc Request[T Resource](ctx context.Context, c *Client, method string, url url.URL, postBody io.Reader) (entity T, err error)\ntype Author struct{ ... }\ntype ChangesetDetails struct{ ... }\ntype Client struct{ ... }\ntype CommandLog struct{ ... }\ntype CommandLogs []*CommandLog\ntype CreatePreviewOpts struct{ ... }\ntype CreatePreviewPayloadRequest struct{ ... }\ntype CreatePreviewResponse struct{ ... }\ntype CreatedPreview struct{ ... }\ntype Credential interface{ ... }\ntype DeploymentMetadata struct{ ... }\ntype DeploymentStackRequest struct{ ... }\ntype DeploymentStackRequests []DeploymentStackRequest\ntype DeploymentStackResponse struct{ ... }\ntype DeploymentStacksPayloadRequest struct{ ... }\ntype DeploymentStacksResponse []DeploymentStackResponse\ntype Drift struct{ ... }\ntype DriftStackPayloadRequest struct{ ... }\ntype DriftStackPayloadRequests []DriftStackPayloadRequest\ntype Drifts []Drift\ntype DriftsStackPayloadResponse struct{ ... }\ntype EmptyResponse string\ntype GitMetadata struct{ ... }\ntype GithubMetadata struct{ ... }\ntype GitlabMetadata struct{ ... }\ntype Label struct{ ... }\ntype LogChannel int\n    const StdoutLogChannel LogChannel ...\ntype LogSyncer struct{ ... }\n    func NewLogSyncer(syncfn Syncer) *LogSyncer\n    func NewLogSyncerWith(syncfn Syncer, batchSize int, syncInterval time.Duration) *LogSyncer\ntype MemberOrganization struct{ ... }\ntype MemberOrganizations []MemberOrganization\ntype PaginatedResult struct{ ... }\ntype PreviewStack struct{ ... }\ntype PreviewStacks []PreviewStack\ntype Resource interface{ ... }\ntype ResponsePreviewStack struct{ ... }\ntype ResponsePreviewStacks []ResponsePreviewStack\ntype ReviewRequest struct{ ... }\ntype ReviewRequestResponse struct{ ... }\ntype ReviewRequestResponsePayload struct{ ... }\ntype ReviewRequestResponses []ReviewRequestResponse\ntype Reviewer Author\ntype Reviewers []Reviewer\ntype RunContext struct{ ... }\ntype Stack struct{ ... }\ntype StackObject struct{ ... }\ntype StacksResponse struct{ ... }\ntype StatusFilters struct{ ... }\n    func NoStatusFilters() StatusFilters\ntype Syncer func(l CommandLogs)\ntype UUID string\ntype UpdateDeploymentStack struct{ ... }\ntype UpdateDeploymentStacks struct{ ... }\ntype UpdateStackPreviewOpts struct{ ... }\ntype UpdateStackPreviewPayloadRequest struct{ ... }\ntype User struct{ ... }\ntype WellKnown struct{ ... }"
  tags        = ["cloud", "golang"]
  id          = "aac72144-ecbc-4a30-92ac-8e2b9113c740"
}
