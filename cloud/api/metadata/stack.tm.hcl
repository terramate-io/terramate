// Copyright 2024 Terramate GmbH
// SPDX-License-Identifier: MPL-2.0

stack {
  name        = "package metadata // import \"github.com/terramate-io/terramate/cloud/metadata\""
  description = "package metadata // import \"github.com/terramate-io/terramate/cloud/metadata\"\n\nPackage metadata contains data structures for platform metadata that is sent\nto TMC, i.e. information about CI/CD environments, pull requests, VCS details.\nA large chunk of definitions can also be found in terramate/cloud/types.go.\n\nHow the metadata has been handled historically:\n  - Initially, it was a flat string->string map with key prefixes for grouping\n    and simple values.\n  - For PR data, we needed more complex data structures that can hold lists etc,\n    so a separate API object review_request was introduced, which did both hold\n    new data, but also implement some logic on how to abstract pull requests\n    from different structures under a single concept.\n\nIn the future, we would like to move away from this and use the following\napproach:\n  - Use a single API object. We keep using the existing metadata map, but relax\n    it to accept string->any.\n  - Group related data by storing them under a top-level key in metadata.\n    No longer flatten data types into prefixed keys.\n  - Do not abstract between different platforms on the CLI level, instead send\n    the data as-is, i.e. \"github_pull_request\": {...}, \"gitlab_merge_request\":\n    {...}, each having different definitions.\n\ntype BitbucketActor struct{ ... }\n    func NewBitbucketActor(in *bitbucket.Actor) (*BitbucketActor, error)\ntype BitbucketPullRequest struct{ ... }\n    func NewBitbucketPullRequest(in *bitbucket.PR) (*BitbucketPullRequest, error)\ntype BitbucketUser struct{ ... }\n    func NewBitbucketUser(in *bitbucket.User) (*BitbucketUser, error)\ntype CommitAuthor struct{ ... }\n    func NewCommitAuthor(in *github.CommitAuthor) (*CommitAuthor, error)\ntype GithubCommit struct{ ... }\n    func NewGithubCommit(in *github.RepositoryCommit) (*GithubCommit, error)\ntype GithubPullRequest struct{ ... }\n    func NewGithubPullRequest(inPR *github.PullRequest, inReviews []*github.PullRequestReview, ...) (*GithubPullRequest, error)\ntype GithubPullRequestReview struct{ ... }\n    func NewGithubPullRequestReview(in *github.PullRequestReview) (*GithubPullRequestReview, error)\ntype GithubTeam struct{ ... }\n    func NewGithubTeam(in *github.Team) (*GithubTeam, error)\ntype GithubUser struct{ ... }\n    func NewGithubUser(in *github.User) (*GithubUser, error)\ntype GitlabMergeRequest struct{ ... }\n    func NewGitlabMergeRequest(inMR *gitlab.MR, inReviewers []gitlab.MRReviewer, inParticipants []gitlab.User) (*GitlabMergeRequest, error)\ntype GitlabMergeRequestReviewer struct{ ... }\n    func NewGitlabMergeRequestReviewer(in *gitlab.MRReviewer) (*GitlabMergeRequestReviewer, error)\ntype GitlabUser struct{ ... }\n    func NewGitlabUser(in *gitlab.User) (*GitlabUser, error)"
  tags        = ["cloud", "golang", "metadata"]
  id          = "892bd4ee-ac54-4fb3-9f0b-b3e1564ab8dc"
}
