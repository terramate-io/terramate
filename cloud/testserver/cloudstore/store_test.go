// Copyright 2023 Terramate GmbH
// SPDX-License-Identifier: MPL-2.0

package cloudstore_test

import (
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/madlambda/spells/assert"
	"github.com/terramate-io/terramate/cloud"
	"github.com/terramate-io/terramate/cloud/testserver/cloudstore"
)

const testUUID = "deadbeef-dead-dead-dead-deaddeafbeef"

func TestUpsertPreview(t *testing.T) {
	expectedUser := cloud.User{
		UUID:        testUUID,
		Email:       "batman@terramate.io",
		DisplayName: "Batman",
		JobTitle:    "Entrepreneur",
	}

	orgUUID := cloud.UUID("88ae6cb4-ee56-40aa-a024-84af44e1f5aa")
	dstore := cloudstore.Data{
		Orgs: map[string]cloudstore.Org{
			"testorg": {
				UUID:           orgUUID,
				Name:           "testorg",
				ReviewRequests: []cloud.ReviewRequest{},
			},
		},
		Users: map[string]cloud.User{
			"other": {
				UUID:        "88ae6cb4-ee56-40aa-a024-84af44e1f5aa",
				Email:       "other@other.io",
				DisplayName: "other",
				JobTitle:    "other",
			},
			"batman": expectedUser,
		},
	}

	preview := cloudstore.Preview{
		PreviewID:       "", // this is auto-generated by the store
		UpdatedAt:       1709644546,
		Technology:      "terraform",
		TechnologyLayer: "default",
		ReviewRequest: &cloud.ReviewRequest{
			Platform:    "github",
			Repository:  "github.com/terramate-io/terramate",
			CommitSHA:   "c7641ee97388baf813d4c51b927541d2e012b116",
			Number:      42,
			Title:       "Test PR",
			Description: "Test descritiption",
			URL:         "https://github.com/terramate-io/terramate/pull/42",
		},
		StackPreviews: []*cloudstore.StackPreview{
			{
				Stack: cloudstore.Stack{
					Stack: cloud.Stack{
						Repository:    "github.com/terramate-io/terramate",
						DefaultBranch: "main",
						MetaID:        "62812fa0-9e3c-4492-ace0-b5843e63fdde",
						MetaName:      "test-stack",
					},
				},
				Status: "pending",
				Cmd:    []string{"terraform", "plan", "-out=plan.out", "-detailed-exitcode"},
			},
		},
	}

	previewID, err := dstore.UpsertPreview(orgUUID, preview)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}

	if previewID == "" {
		t.Errorf("expected previewID to be non-empty")
	}

	org := dstore.Orgs["testorg"]
	assert.EqualInts(t, 1, len(org.ReviewRequests))
	assert.EqualInts(t, 1, len(org.Previews))
	assert.EqualInts(t, 1, len(org.Stacks))
	assert.EqualInts(t, 1, len(org.Previews[0].StackPreviews))
	assert.EqualStrings(t, preview.StackPreviews[0].MetaID, org.Previews[0].StackPreviews[0].MetaID)
	assert.EqualStrings(t, preview.StackPreviews[0].Status.String(), org.Previews[0].StackPreviews[0].Status.String())
	assert.EqualInts(t, preview.ReviewRequest.Number, org.Previews[0].ReviewRequest.Number)
	assert.EqualStrings(t, previewID, org.Previews[0].PreviewID)
	assert.EqualStrings(t, preview.Technology, org.Previews[0].Technology)
	assert.EqualStrings(t, preview.TechnologyLayer, org.Previews[0].TechnologyLayer)
	assert.EqualInts(t, int(preview.UpdatedAt), int(org.Previews[0].UpdatedAt))
}

func TestGetUser(t *testing.T) {
	expectedUser := cloud.User{
		UUID:        testUUID,
		Email:       "batman@terramate.io",
		DisplayName: "Batman",
		JobTitle:    "Entrepreneur",
	}
	dstore := cloudstore.Data{
		Users: map[string]cloud.User{
			"other": {
				UUID:        "88ae6cb4-ee56-40aa-a024-84af44e1f5aa",
				Email:       "other@other.io",
				DisplayName: "other",
				JobTitle:    "other",
			},
			"batman": expectedUser,
		},
	}
	_, found := dstore.GetUser("nonexistent@terramate.io")
	if found {
		t.Fatal("user must not exist")
	}
	user, found := dstore.GetUser("batman@terramate.io")
	if !found {
		t.Fatal("user must exist")
	}
	if diff := cmp.Diff(expectedUser, user); diff != "" {
		t.Fatal(diff)
	}
}
