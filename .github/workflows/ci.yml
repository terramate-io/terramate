# Copyright 2023 Terramate GmbH
# SPDX-License-Identifier: MPL-2.0

name: ci

on:
  push:
    branches:
      - main
      - v0.4.x
  pull_request:

jobs:
  checks:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Configure asdf and plugins needed
        uses: asdf-vm/actions/install@83133f03f5693901c2296a8e622955087dc20267

      - name: checking go mod tidyness
        run: terramate run --tags golang --changed -- make mod/check

      - name: linting code
        run: terramate run --tags golang --changed -- make lint

      - name: checking license on source code
        run: terramate run --tags golang --changed -- make license/check

  build_test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    strategy:
      matrix:
        os: ["ubuntu-20.04", "macos-13"]
        go: ["1.21"]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.2
          tofu_wrapper: false
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure asdf and plugins needed
        uses: asdf-vm/actions/install@83133f03f5693901c2296a8e622955087dc20267

      - name: make generate
        run: terramate generate

      - name: make test
        run: terramate run --tags golang --changed -- make test
        env:
          TM_TEST_TERRAFORM_REQUIRED_VERSION: "1.7.5"

      - name: make build
        run: terramate run --tags golang --changed -- make build

      - name: check cloud info
        run: terramate run --tags golang --changed -- ./bin/terramate -vv experimental cloud info

  gh_integration_test:
    name: GHA Integration Test

    runs-on: "ubuntu-20.04"

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Configure asdf and plugins needed
        uses: asdf-vm/actions/install@83133f03f5693901c2296a8e622955087dc20267

      - name: make test/ci
        run: terramate run --tags golang --changed -- make test/ci

  release_dry_run:
    name: Release Dry Run

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Configure asdf and plugins needed
        uses: asdf-vm/actions/install@83133f03f5693901c2296a8e622955087dc20267

      - name: install cosign 
        run: go install github.com/sigstore/cosign/v2/cmd/cosign@v2.2.4
      - name: install goreleaser
        run: |
          curl -sL https://github.com/goreleaser/goreleaser-pro/releases/download/v1.14.0-pro/goreleaser-pro_Linux_x86_64.tar.gz -o /tmp/goreleaser.tar.gz
          cd /tmp && tar -xzf goreleaser.tar.gz && chmod +x goreleaser
          sudo mv /tmp/goreleaser /usr/local/bin/
      
      - name: Create cosign.pub file
        run: echo "${{ secrets.COSIGN_PUBLIC_KEY }}" > cosign.pub      
        
      - name: release dry run
        run: make release/dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_API_KEY }}
          FURY_TOKEN: ${{ secrets.FURY_TOKEN}}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD}}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY }}

      - name: Locate checksum file
        id: find_checksum
        run: |
          if [ -z "$(ls dist/*checksums.txt)" ]; then
            echo "Error: Checksum file not found."
            exit 1
          fi
          echo "CHECKSUM_FILE=$(ls dist/*checksums.txt)" >> $GITHUB_ENV

      - name: Locate signature file
        id: find_signature
        run: |
          if [ -z "$(ls dist/*checksum*.txt.sig)" ]; then
            echo "Error: Signature file not found."
            exit 1
          fi
          echo "SIGNATURE_FILE=$(ls dist/*checksum*.txt.sig)" >> $GITHUB_ENV

      - name: Verify checksums with cosign
        run: |
          cosign verify-blob --key cosign.pub --signature ${{ env.SIGNATURE_FILE }} ${{ env.CHECKSUM_FILE }}       
  ci:
    needs:
      - checks
      - build_test
      - gh_integration_test
    runs-on: ubuntu-20.04
    steps:
      - uses: Kesin11/actions-timeline@v1
