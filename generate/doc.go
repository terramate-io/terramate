// Copyright 2022 Mineiros GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package generate implements the Terramate file generation.
//
// The file generation is driven by HCL generate_* blocks and the filesystem
// hierarchy.
//
// There are two kinds of generate blocks:
//   1. File - generates any file content.
//   2. HCL  - generates HCL file content.
//
// Each generate block has:
//   - a label which specifies the target file.
//   - a condition which specifies when it must be generated.
//   - any number of local scoped variables defined by the [lets] namespace.
//   - an evaluated body, which must be the content of the target file.
//   - a context which specify the behavior of the generation.
//
// The context defines the kind of evaluation context / generation strategy to
// be used for the block. There are two kinds of context:
//
// - stack (the default): defines a stack generated file, which means its target
//   file will be generated inside a stack and it can only reference stack's
//   evaluation context (see [stack.EvalContext]).
// - root: defines a root generated file, which means its target file must be
//   an absolute project path and it can only reference root's evaluation
//   context (see [project.EvalContext]).
//
// Note: The `generate_hcl` block has a fixed context=stack for now, but this
// is a UX restriction which could be relaxed in the future.
//
// Root context:
//
// Below is an example of root scoped generate block:
//
//   generate_file "/etc/resolv.conf" {
//       context = root
//       lets {
//           nameservers = tm_try(global.nameservers, ["8.8.8.8", "8.8.4.4"])
//       }
//
//       content = <<-EOT
//           # nameservers generated by Terramate.
//           %{ for ip in let.nameservers }
//           nameserver ${ip}
//           %{ endfor }
//       EOT
//   }
//
// The generate block above has root scope, which requires an absolute target
// path on its label, but the path is absolute relative to the project's
// directory (there's no way to generate files on arbitrary paths in the host).
// The `content` attribute is evaluated with the [project.EvalContext] enhanced
// by the evaluation of the [lets] block. If the `condition` is not specified
// (as is the case) then it's assumed to be `true`, which means the file must
// be generated.
// It generates the file content below (if no `global.nameservers` is defined):
//
//   # nameservers generated by Terramate.
//   nameserver 8.8.8.8
//   nameserver 8.8.4.4
//
// Restrictions:
// - The target file must not be inside a stack.
//   The reason is that stacks can be moved and then the generate block will
//   generate files in the wrong directory.
//
// Stack context:
//
// The stack generate block is very similar to the root counterpart, the only
// differences being:
//
// - The target file must be a relative path.
// - The generate block receives a [stack.EvalContext] evaluation context.
//
// Example:
//
//   generate_file "package.json" {
//       context = stack
//       lets {
//           name        = "${tm_title(terramate.stack.name})"
//           description = "The ${let.name} does nothing :-)"
//           version     = "0.1.0"
//       }
//       content = tm_jsonencode(let.package)
//   }
//
// For a stack named "app", it generates the file content below:
//
//   {"name":"App","description":"The App does nothing :-)","version":"0.1.0"}
//
// File generation strategy:
//
// The concepts involved in the file generation are:
//
// - plan: the planning of a generation.
// - generate blocks: file definition
// - scope: configuration from which generate blocks will be selected.
// - context: defines how generate blocks are selected.
//
// The entrypoint for the file generation is the function [DoPlan], which plans
// the generation of root and stack context files. This function does not
// change any files on disk but provide an explicit method ([Plan.Persist]) to
// do so.
// The [DoPlan] function receives the [config.Tree] called `scope`, for the
// generation scope, which means that if given the root tree, then it's going to
// select generate blocks for the whole project but if given a tree for a
// sub-directory, only generate blocks visible to that level will be generated.
//
// The selection of the block is different for stack and root contexts:
//
// For the stack context, it selects all the generate blocks of stack
// context defined in the `scope` configuration and its parent configurations.
//
// For the root context, it selects all the generate blocks of root context
// defined in the `scope` configuration and any of its children configuration.
//
// So the stack context loads current and parent generate blocks and root
// context loads current and child generate blocks.
//
// Planning Phases:
//
// 1. Selection & Evaluation
//
// All generate blocks are selected from provided `scope` and evaluated accordingly
// with if it's a stack or root block.
//
// Each generate block is evaluated into a [Generate] file.
//
// 2. Filtering
//
// Only blocks with `generate.condition == true` remains.
//
// 3. Validation
//
// The validation phase checks some constraints to the set of filtered generate
// blocks in order to have a consistent and clear set of generated target files.
// The constraints are:
//
//   - there must result a unique set of `generate.target` paths.
//   - If a `generate.context` is `root` then its `generate.target` path must
//     not be inside a stack.
//   - If a `generate.context` is `stack` then its `generate.target` path must
//     be inside a stack.
//   - `generate.assertions` must pass.
//   - other validations.
//
// 4. Plan the required file system changes.
//
// The plan returns all the [Generate] evaluated files and the set of operations
// needed: create, delete and change of files.
//
// Outdated File Detection:
//
// Additionally, the generate package is able to detect if any generated file
// is outdated on disk, which means its generate block definition does not
// match the correspond file on disk.
//
// It does so by doing the strategy below:
//
// 1. Apply the 1 Plan Phase (Selection and Evaluation) from the root scope.
//
// 2. Scans the filesystem, and do steps below for each file:
//   2.1. If it's a target file of generate blocks but none has `condition=true`
//      then it's outdated (must be deleted).
//   2.2. If it's a target file of a single generate block with `condition=true`
//      and its content is different than `generate.content`, then it's
//      outdated (must be regenerated).
//   2.3. If it has a Terramate header but no generate block has it as target,
//      then it's outdated (must be deleted)
//
// The outdated file detection returns a list of outdated files.
package generate
