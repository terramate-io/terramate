// Copyright 2024 Terramate GmbH
// SPDX-License-Identifier: MPL-2.0

stack {
  name        = "package config // import \"github.com/terramate-io/terramate/config\""
  description = "package config // import \"github.com/terramate-io/terramate/config\"\n\nPackage config provides high level Terramate configuration facilities.\n\nconst DefaultFilename = \"terramate.tm.hcl\" ...\nconst ErrScriptSchema errors.Kind = \"script config has an invalid schema\" ...\nconst ErrStackValidation errors.Kind = \"validating stack fields\" ...\nconst ErrSchema errors.Kind = \"config has an invalid schema\"\nconst MaxScriptDescRunes = 1000\nconst MaxScriptNameRunes = 128\nfunc IsStack(root *Root, dir string) bool\nfunc ReverseStacks(stacks List[*SortableStack])\nfunc Skip(name string) bool\nfunc ValidateWatchPaths(rootdir string, stackpath string, paths []string) (project.Paths, error)\ntype Assert struct{ ... }\n    func EvalAssert(evalctx *eval.Context, cfg hcl.AssertConfig) (Assert, error)\ntype DirElem interface{ ... }\ntype Input struct{ ... }\n    func EvalInput(evalctx *eval.Context, input hcl.Input) (Input, error)\ntype Inputs []Input\ntype List[T DirElem] []T\n    func LoadAllStacks(root *Root, cfg *Tree) (List[*SortableStack], error)\n    func StacksFromTrees(trees List[*Tree]) (List[*SortableStack], error)\ntype Output struct{ ... }\n    func EvalOutput(evalctx *eval.Context, output hcl.Output) (Output, error)\ntype Outputs []Output\ntype Root struct{ ... }\n    func LoadRoot(rootdir string) (*Root, error)\n    func NewRoot(tree *Tree) *Root\n    func TryLoadConfig(fromdir string) (tree *Root, configpath string, found bool, err error)\ntype Script struct{ ... }\n    func EvalScript(evalctx *eval.Context, script hcl.Script) (Script, error)\ntype ScriptCmd struct{ ... }\ntype ScriptCmdOptions struct{ ... }\ntype ScriptJob struct{ ... }\ntype SortableStack struct{ ... }\ntype Stack struct{ ... }\n    func LoadStack(root *Root, dir project.Path) (*Stack, error)\n    func NewStackFromHCL(root string, cfg hcl.Config) (*Stack, error)\n    func TryLoadStack(root *Root, cfgdir project.Path) (stack *Stack, found bool, err error)\ntype Tree struct{ ... }\n    func NewTree(cfgdir string) *Tree"
  tags        = ["config", "golang"]
  id          = "f5720006-f59e-44db-b248-6618e9f27bbc"
}
