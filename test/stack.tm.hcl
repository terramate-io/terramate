// Copyright 2024 Terramate GmbH
// SPDX-License-Identifier: MPL-2.0

stack {
  name        = "package test // import \"github.com/terramate-io/terramate/test\""
  description = "package test // import \"github.com/terramate-io/terramate/test\"\n\nPackage test provides testing routines reused throughout terramate code base.\n\nconst Username = \"terramate tests\" ...\nfunc AppendFile(t testing.TB, dir string, filename string, content string)\nfunc AssertChmod(t testing.TB, fname string, mode fs.FileMode)\nfunc AssertConfigEquals(t *testing.T, got, want []config.Assert)\nfunc AssertDiff(t *testing.T, got, want interface{}, msg ...interface{})\nfunc AssertEqualPaths(t *testing.T, got, want project.Path, fmtargs ...any)\nfunc AssertEqualPos(t *testing.T, got, want info.Pos, fmtargs ...any)\nfunc AssertEqualRanges(t *testing.T, got, want info.Range, fmtargs ...any)\nfunc AssertEqualSets[T comparable](t *testing.T, got, want []T)\nfunc AssertFileContentEquals(t *testing.T, fname string, want string)\nfunc AssertFileEquals(t *testing.T, filepath1, filepath2 string)\nfunc AssertGenCodeEquals(t *testing.T, got string, want string)\nfunc AssertStackImports(t *testing.T, rootdir string, stackHostPath string, want []string)\nfunc AssertStacks(t testing.TB, got, want config.Stack)\nfunc AssertTerramateConfig(t *testing.T, got, want hcl.Config)\nfunc AssertTreeEquals(t *testing.T, dir1, dir2 string)\nfunc CanonPath(t testing.TB, path string) string\nfunc Chmod(fname string, mode fs.FileMode) error\nfunc DoesNotExist(t testing.TB, dir, fname string)\nfunc EmptyRepo(t testing.TB, bare bool) string\nfunc FixupRangeOnAsserts(dir string, asserts []config.Assert)\nfunc Getwd(t testing.TB) string\nfunc IsDir(t testing.TB, dir, fname string)\nfunc IsFile(t testing.TB, dir, fname string)\nfunc LookPath(t *testing.T, file string) string\nfunc Mkdir(t testing.TB, base string, name string) string\nfunc MkdirAll(t testing.TB, path string)\nfunc MkdirAll2(t testing.TB, path string, perm fs.FileMode)\nfunc NewExpr(t *testing.T, expr string) hhcl.Expression\nfunc NewGitWrapper(t testing.TB, wd string, env []string) *git.Git\nfunc NewRepo(t testing.TB) string\nfunc NonExistingDir(t testing.TB) string\nfunc ParseSource(t *testing.T, source string) tf.Source\nfunc ParseTerramateConfig(t *testing.T, dir string) hcl.Config\nfunc PrependToPath(env []string, dir string) ([]string, bool)\nfunc ReadDir(t testing.TB, dir string) []os.DirEntry\nfunc ReadFile(t testing.TB, dir, fname string) []byte\nfunc RelPath(t testing.TB, basepath, targetpath string) string\nfunc RemoveAll(t testing.TB, path string)\nfunc RemoveFile(t testing.TB, dir, fname string)\nfunc Symlink(t testing.TB, oldname, newname string)\nfunc TempDir(t testing.TB) string\nfunc WriteFile(t testing.TB, dir string, filename string, content string) string\nfunc WriteRootConfig(t testing.TB, rootdir string)"
  tags        = ["golang", "test"]
  id          = "d95b690e-7bff-4196-aec8-2a1a39d3a8dd"
}
