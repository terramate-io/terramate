// Copyright 2024 Terramate GmbH
// SPDX-License-Identifier: MPL-2.0

stack {
  name        = "package hclutils // import \"github.com/terramate-io/terramate/test/hclwrite/hclutils\""
  description = "package hclutils // import \"github.com/terramate-io/terramate/test/hclwrite/hclutils\"\n\nPackage hclutils provides useful functions to build HCL documents. It is usually\nimported with . so building HCL documents can be done very fluently and yet in a\ntype safe manner.\n\nfunc Assert(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Backend(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Block(name string, builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Bool(name string, val bool) hclwrite.BlockBuilder\nfunc Command(args ...string) hclwrite.BlockBuilder\nfunc Commands(args ...[]string) hclwrite.BlockBuilder\nfunc Config(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Content(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Default(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Doc(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Env(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc EvalExpr(t *testing.T, name string, expr string) hclwrite.BlockBuilder\nfunc Experiments(names ...string) hclwrite.BlockBuilder\nfunc Expr(name string, expr string) hclwrite.BlockBuilder\nfunc GenerateFile(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc GenerateHCL(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Globals(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Import(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Input(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Labels(labels ...string) hclwrite.BlockBuilder\nfunc Lets(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Locals(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Manifest(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Map(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Module(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Number(name string, val int64) hclwrite.BlockBuilder\nfunc Output(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc ProjectPaths(paths ...string) hclwrite.BlockBuilder\nfunc RepositoryPaths(paths ...string) hclwrite.BlockBuilder\nfunc Run(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Script(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Stack(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc StackFilter(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Str(name string, val string) hclwrite.BlockBuilder\nfunc Terraform(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Terramate(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc TmDynamic(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Trigger(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Value(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Variable(builders ...hclwrite.BlockBuilder) *hclwrite.Block\nfunc Vendor(builders ...hclwrite.BlockBuilder) *hclwrite.Block"
  tags        = ["golang", "hclutils", "hclwrite", "test"]
  id          = "acce0447-b15a-42d9-9252-dfe465fc5110"
}
